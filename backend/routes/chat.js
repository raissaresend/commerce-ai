// backend/routes/chat.js - USANDO A NOVA SINTAXE @google/genai

require("dotenv").config();
const express = require("express");
const router = express.Router();
// üëá Importa da biblioteca correta
const { GoogleGenAI } = require("@google/genai");

// Verifica a chave da API
if (!process.env.GEMINI_API_KEY) {
  console.error("ERRO FATAL: GEMINI_API_KEY n√£o encontrada no .env");
  process.exit(1);
}
const apiKey = process.env.GEMINI_API_KEY;
console.log("Chave API Carregada:", apiKey ? "Sim" : "N√ÉO!!!");

// üëá Inicializa o cliente central como na documenta√ß√£o "Depois"
const ai = new GoogleGenAI({ apiKey: apiKey });

// Escolhe o modelo - Use o que est√° dispon√≠vel para voc√™
const modelName = "gemini-2.5-flash"; // <<< CONFIRME AQUI ou use "gemini-2.5-flash-latest"
console.log(`Usando modelo Gemini: ${modelName}`);

// Rota POST /api/chat/message
router.post("/message", async (req, res) => {
  const userMessage = req.body.message;

  if (!userMessage) {
    return res.status(400).json({ error: "Nenhuma mensagem fornecida." });
  }

  console.log(`Mensagem recebida: "${userMessage}"`);

  try {
    // Define a instru√ß√£o do sistema (opcional, mas bom)
    const systemInstruction =
      "Voc√™ √© um atendente virtual de um Pet Shop chamado Commerce.AI. Responda de forma √∫til, amig√°vel e concisa.";

    console.log(`Enviando para Gemini (Modelo: ${modelName})...`);

    // üëá Chama a API usando a sintaxe "Depois" da documenta√ß√£o
    // A chamada √© feita diretamente em ai.models.generateContent
    const response = await ai.models.generateContent({
      model: modelName,
      // Passa a mensagem do usu√°rio dentro de 'contents'
      contents: userMessage,
      // Passa a instru√ß√£o do sistema e outras configura√ß√µes em 'config'
      config: {
        systemInstruction: systemInstruction,
        // temperature: 0.1, // Exemplo de outra config, se necess√°rio
      },
    });

    // Acesso ao texto da resposta tamb√©m mudou ligeiramente
    const botText = response.text; // Acessa diretamente .text

    console.log("Resposta do Gemini:", botText);
    res.json({ reply: botText });
  } catch (error) {
    // Tratamento de erro
    console.error("Erro detalhado ao chamar a API do Gemini:", error);
    let errorMessage = "Erro desconhecido ao processar com IA.";
    if (error instanceof Error) {
      errorMessage = error.message;
      if (error.statusText) errorMessage += ` (Status: ${error.statusText})`; // Adiciona status se houver
    } else {
      errorMessage = String(error);
    }
    res.status(500).json({
      error: `Erro ao processar a mensagem com a IA. Detalhes: ${errorMessage}`,
    });
  }
});

module.exports = router;
